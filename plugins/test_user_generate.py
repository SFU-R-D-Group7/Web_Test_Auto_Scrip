"""
This file is used to generate new user,
we need to make sure the user generated by this file is not previously registried
##################################################################################
Possible TASKs that require new user each time:
1.REPETITIVE REGISTRATION
2.ADMIN REGISTRATION
"""

from plugins import SQL_injection as sqlin
import random
MAX_TEST = 40
MAX_LENGTH = 400

class new_user_generate():

    def __init__(self):
        pass

    def check(self, email):
        """
        This function is used to check whether the email of
        the user is previously registried or not
        return: TRUE if not registried
        """
        test_LoginStatus = sqlin.SQL_injector()
        new_script = email + "\'--"
        response = test_LoginStatus.run(new_script, 'use{}'.format(email))
        if response == 200:
            print("User exists! You need to generate a new User")
            return False
        else:
            print("User not exits! Email is available for registration")
            return True

    def generate_email(self):
        """
        This function is used to generate a new user email with some terminology.
        We may use some random function to do this.
        And we will call check function to verify if the email is registried or not
        """
        num = random.randint(0, MAX_LENGTH)
        email = 'test{}@gmail.com'.format(num)
        idx = 0
        while ( idx < MAX_TEST ):
            #print("This is {} time try with email".format(idx) )
            #print(email)
            if self.check(email):
                print("----------------------------")
                print("We generate new user with email")
                print(email)
                return email
            else:
                idx += 1
                num = random.randint(0, MAX_LENGTH)
                email = 'test{}@gmail.com'.format(num)
        print("Sorry, we cannot find new user")
